BitManipulation:

1. binary nagtive number concat(1, 2e(n-1) - K) k is the abs(Number) like -3 : (8-3) = 5 1101
2. >> arithmetic shift >>> logic shift
3. get bit i: (num &(i<<1))
   set bit i: num|(i<<1)
   clear bit i: mask = ~(i<<1), num &mask, clear bit after i: num & (1<<i-1), clear bit before i: num & (-1<<i+1)
   update bit i (set i to value v): num & (~(1<<i)) | v<<i;
   

1. &->erase or set bit ; |->append bits together
2. x*2-> <<1 (useful cal float: *2, integer digit is the first digit eg 0.101->1.01 -1 continue)
3. n&(n-1) == 0 means no digits are same, 100 011 -> n is power of 2. n&(n-1) will clear less significant bit in c
4. 0xaa->10101010 0x55->01010101 get odd and even


Set union A | B
Set intersection A & B
Set subtraction A & ~B
Set negation ALL_BITS ^ A or ~A
Set bit A |= 1 << bit
Clear bit A &= ~(1 << bit)
Test bit (A & 1 << bit) != 0
Extract last bit A&-A or A&~(A-1) or x^(x&(x-1))
Remove last bit A&(A-1)
Get all 1-bits ~0

"&" AND operation, for example, 2 (0010) & 7 (0111) => 2 (0010)

"^" XOR operation, for example, 2 (0010) ^ 7 (0111) => 5 (0101)

"~" NOT operation, for example, ~2(0010) => -3 (1101) what??? Don't get frustrated here. It's called two's complement.

1111 is -1, in two's complement

1110 is -2, which is ~2 + 1, ~0010 => 1101, 1101 + 1 = 1110 => 2

1101 is -3, which is ~3 + 1

so if you want to get a negative number, you can simply do ~x + 1

//Userful subs
// Recursive
public int getSum(int a, int b) {
	return (b == 0) ? a : getSum(a ^ b, (a & b) << 1);
}

// Recursive
public int getSubtract(int a, int b) {
	return (b == 0) ? a : getSubtract(a ^ b, (~a & b) << 1);
}

// Get negative number
public int negate(int x) {
	return ~x + 1;
}